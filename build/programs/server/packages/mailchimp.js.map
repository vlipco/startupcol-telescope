{"version":3,"file":"/packages/mailchimp.js","sources":["mailchimp/lib/server/mailchimp.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2C;AACA,4C;;AAEA,oB;AACA,+B;AACA,uC;AACA,c;AACA,2C;AACA,E;AACA,C;;AAEA,yE;AACA,yD;AACA,0D;;AAEA,mE;AACA,mE;AACA,Q;AACA,qG;AACA,C;;AAEA,yC;AACA,wC;AACA,gD;AACA,kD;AACA,G;AACA,C;;AAEA,2E;AACA,0E;AACA,gB;AACA,6E;AACA,G;AACA,4B;AACA,I;AACA,C;;AAEA,gB;AACA,oE;AACA,sB;AACA,gB;AACA,6C;AACA,0C;AACA,K;AACA,U;AACA,W;AACA,G;;AAEA,O;AACA,gF;AACA,qB;AACA,sE;AACA,G;;AAEA,4B;AACA,wE;AACA,iB;AACA,yD;AACA,kE;AACA,W;AACA,4B;AACA,I;AACA,K;AACA,uB;AACA,E;AACA,G","sourcesContent":["var mailchimp = Npm.require( 'mailchimp' );\nvar Future = Npm.require( 'fibers/future' );\n\nMailChimpOptions = {\n\t'apiKey'\t: '',\t\t// Set this in\n\t'listId'\t: '',\t\t// settings.json file!\n\t'options'\t: {\n\t\t'version': '2.0'\t// Living on The Edge ;)\n\t}\n}\n\nif ( Meteor.settings && Meteor.settings.MailChimpOptions !== undefined &&\n\tMeteor.settings.MailChimpOptions.apiKey !== undefined &&\n\tMeteor.settings.MailChimpOptions.listId !== undefined ) {\n\n\tMailChimpOptions.apiKey = Meteor.settings.MailChimpOptions.apiKey;\n\tMailChimpOptions.listId = Meteor.settings.MailChimpOptions.listId;\n} else {\n\tconsole.log( '[MailChimp] Error: MailChimp Options have not been set in your settings.json file.' );\n}\n\nMailChimp = function( apiKey, options ) {\n\tthis.asyncAPI = mailchimp.MailChimpAPI(\n\t\t( apiKey )\t? apiKey\t: MailChimpOptions.apiKey,\n\t\t( options )\t? options\t: MailChimpOptions.options\n\t);\n}\n\nMailChimp.prototype.call = function( section, method, options, callback ) {\n\tthis.asyncAPI.call( section, method, options, function( error, result ) {\n\t\tif ( error ) {\n\t\t\tconsole.log( '[MailChimp] Error: ' + error.code + ' - ' + error.message );\n\t\t}\n\t\tcallback( error, result );\n\t});\n}\n\nMeteor.methods({\n\t'MailChimp': function ( clientOptions, section, method, options ) {\n\t\tswitch ( section ) {\n\t\t\tcase 'lists':\n\t\t\t\tif ( !options.id || options.id === \"\" ) {\n\t\t\t\t\toptions.id = MailChimpOptions.listId;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\ttry {\n\t\t\tvar mailChimp = new MailChimp( clientOptions.apiKey, clientOptions.options );\n\t\t} catch ( error ) {\n\t\t\tthrow new Meteor.Error( error.error, error.reason, error.details );\n\t\t}\n\n\t\tvar future = new Future();\n\t\tmailChimp.call( section, method, options, function ( error, result ) {\n\t\t\tif ( error ) {\n\t\t\t\t// Pass the original MailChimpAPI Error to the client\n\t\t\t\tfuture.throw( new Meteor.Error( error.code, error.message ) );\n\t\t\t} else {\n\t\t\t\tfuture.return( result );\n\t\t\t}\n\t\t});\n\t\treturn future.wait();\n\t}\n});\n"]}