{"version":3,"file":"/packages/telescope-newsletter.js","sources":["telescope-newsletter/lib/newsletter.js","telescope-newsletter/lib/server/campaign.js","telescope-newsletter/lib/server/cron.js","telescope-newsletter/lib/server/mailchimp.js","telescope-newsletter/lib/server/routes.js","telescope-newsletter/lib/server/templates/emailDigest.handlebars","telescope-newsletter/lib/server/templates/emailDigestConfirmation.handlebars","telescope-newsletter/lib/server/templates/emailPostItem.handlebars"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mC;AACA,O;AACA,iB;AACA,kB;AACA,I;AACA,c;AACA,e;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,U;AACA,mB;AACA,kB;AACA,K;AACA,Y;AACA,iB;AACA,kB;AACA,K;AACA,G;;AAEA,gD;AACA,wB;AACA,G;;AAEA,qB;AACA,G;AACA,gC;AACA,qB;AACA,iB;AACA,oB;AACA,K;AACA,G;AACA,E;;AAEA,W;;AAEA,2G;;AAEA,kB;AACA,6B;AACA,mB;AACA,kB;AACA,mB;AACA,2C;AACA,G;AACA,C;AACA,qC;;AAEA,uB;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,G;AACA,C;AACA,0C;;AAEA,uB;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,G;AACA,C;AACA,0C;;AAEA,0B;AACA,qC;AACA,mB;AACA,iB;AACA,kB;AACA,G;AACA,C;AACA,6C;;AAEA,2B;AACA,sC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,gB;AACA,S;AACA,mB;AACA,4B;AACA,U;AACA,S;AACA,mB;AACA,+C;AACA,U;AACA,S;AACA,mB;AACA,sC;AACA,U;AACA,S;AACA,mB;AACA,wC;AACA,U;AACA,S;AACA,mB;AACA,wC;AACA,S;AACA,O;AACA,M;AACA,oD;AACA,G;AACA,C;AACA,8C;;AAEA,gG;AACA,4C;AACA,U;AACA,W;AACA,oC;AACA,iB;AACA,0B;AACA,O;AACA,O;AACA,4C;AACA,I;AACA,C;;AAEA,kB;AACA,8B;AACA,G;;;;;;;;;;;;;;;;;;ACnIA,qB;AACA,iB;;AAEA,0C;;AAEA,gF;;AAEA,qD;AACA,uH;AACA,E;AACA,yF;AACA,uD;AACA,uF;;AAEA,8B;AACA,qB;AACA,sB;AACA,gB;AACA,K;AACA,yD;AACA,C;;AAEA,uC;AACA,mC;;AAEA,iF;AACA,6C;AACA,iB;AACA,sB;;AAEA,0B;;AAEA,qD;;AAEA,qG;AACA,qC;AACA,sC;AACA,kC;AACA,0C;AACA,yC;AACA,uD;AACA,O;;AAEA,kB;AACA,iH;AACA,I;AACA,gB;AACA,6C;;AAEA,gF;AACA,K;;AAEA,0C;AACA,qE;AACA,kC;AACA,gD;AACA,sB;AACA,K;;AAEA,kD;AACA,iD;;AAEA,U;AACA,wC;AACA,oC;AACA,mB;AACA,G;AACA,C;;AAEA,oC;AACA,+E;AACA,qB;AACA,iD;AACA,Q;AACA,+C;AACA,uB;AACA,iB;AACA,G;AACA,C;;AAEA,gB;AACA,6B;AACA,2B;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;ACpFA,6B;;AAEA,oC;;AAEA,iC;AACA,sE;AACA,sB;AACA,wB;AACA,oD;AACA,wD;;AAEA,2C;AACA,4C;AACA,gD;;AAEA,iC;AACA,0C;AACA,8C;;AAEA,oC;AACA,wC;AACA,4C;;AAEA,0B;AACA,gB;AACA,K;AACA,C;;AAEA,uC;AACA,W;AACA,sD;AACA,kD;AACA,uC;;AAEA,Q;AACA,kC;AACA,C;;AAEA,gB;AACA,8B;AACA,8B;AACA,qC;AACA,iB;AACA,8B;AACA,I;AACA,K;AACA,mB;AACA,2B;AACA,G;AACA,G;;AAEA,2B;AACA,gE;AACA,uB;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;ACvDA,wC;AACA,0D;AACA,0D;;AAEA,kD;AACA,mD;AACA,mB;AACA,K;AACA,gD;AACA,iB;;AAEA,6D;;AAEA,uC;;AAEA,S;AACA,kC;AACA,uB;AACA,qC;AACA,K;;AAEA,sC;AACA,sB;AACA,gB;AACA,yC;AACA,kC;AACA,+C;AACA,qD;AACA,Q;AACA,gB;AACA,4B;AACA,kB;AACA,O;AACA,0D;AACA,oB;AACA,qC;AACA,+B;AACA,c;AACA,yC;AACA,mD;;AAEA,4B;AACA,6C;AACA,2F;;AAEA,2C;AACA,mB;AACA,sC;AACA,6D;AACA,sB;AACA,yC;AACA,mC;AACA,gB;AACA,iE;AACA,yC;AACA,uD;;AAEA,iC;AACA,0G;;AAEA,sC;AACA,iG;AACA,kC;AACA,0C;AACA,uC;AACA,e;AACA,kG;AACA,sC;AACA,W;AACA,Y;AACA,O;AACA,Q;AACA,G;AACA,gB;AACA,C;;AAEA,0D;AACA,kB;;AAEA,qC;AACA,gB;AACA,wB;AACA,2C;AACA,uB;AACA,2B;AACA,e;AACA,8C;AACA,G;;AAEA,0D;AACA,0D;AACA,oC;AACA,qF;AACA,6D;;AAEA,yD;;AAEA,S;AACA,kC;AACA,uB;AACA,qC;AACA,K;;AAEA,qC;AACA,kC;AACA,8B;AACA,2B;AACA,0D;AACA,oB;AACA,qC;AACA,0B;AACA,c;AACA,gD;AACA,kB;AACA,+D;AACA,2B;AACA,O;AACA,Q;AACA,G;;AAEA,E;;AAEA,wD;;AAEA,gB;AACA,4C;AACA,wD;AACA,S;AACA,wD;AACA,qB;AACA,iD;AACA,K;AACA,I;AACA,6C;AACA,S;AACA,iD;AACA,qB;AACA,iD;AACA,K;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC3IA,4B;;AAEA,yB;;AAEA,4B;AACA,sB;AACA,8B;AACA,0B;AACA,4F;AACA,iJ;AACA,oI;;AAEA,4E;AACA,4B;AACA,O;AACA,O;;AAEA,sC;AACA,sB;AACA,yC;AACA,0B;AACA,6F;AACA,oC;AACA,+C;AACA,+C;AACA,W;AACA,kE;AACA,4B;AACA,O;AACA,O;;AAEA,K;;AAEA,G;;;;;;;;;;;;;;;;;;AClCA,mmC;;;;;;;;;;;;;;;;;;ACAA,oe;;;;;;;;;;;;;;;;;;ACAA,0qC","sourcesContent":["campaignSchema = new SimpleSchema({\n _id: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    optional: true\n  },\n  sentAt: {\n    type: String,\n    optional: true\n  },\n  status: {\n    type: String,\n    optional: true\n  },\n  posts: {\n    type: [String],\n    optional: true\n  }, \n  webHits: {\n    type: Number,\n    optional: true\n  }, \n});\n\nCampaigns = new Meteor.Collection(\"campaigns\", {\n  schema: campaignSchema\n});\n\naddToPostSchema.push(\n  {\n    propertyName: 'scheduledAt',\n    propertySchema: {\n      type: Date,\n      optional: true\n    }\n  }\n);\n\n// Settings\n\n// note for next two fields: need to add a way to tell app not to publish field to client except for admins\n\nvar showBanner = {\n  propertyName: 'showBanner',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    label: 'Show newsletter sign-up banner'\n  }\n}\naddToSettingsSchema.push(showBanner);\n\nvar mailChimpAPIKey = {\n  propertyName: 'mailChimpAPIKey',\n  propertySchema: {\n    type: String,\n    optional: true,\n  }\n}\naddToSettingsSchema.push(mailChimpAPIKey);\n\nvar mailChimpListId = {\n  propertyName: 'mailChimpListId',\n  propertySchema: {\n    type: String,\n    optional: true,\n  }\n}\naddToSettingsSchema.push(mailChimpListId);\n\nvar postsPerNewsletter = {\n  propertyName: 'postsPerNewsletter',\n  propertySchema: {\n    type: Number,\n    optional: true\n  }\n}\naddToSettingsSchema.push(postsPerNewsletter);\n\nvar newsletterFrequency = {\n  propertyName: 'newsletterFrequency',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      options: [\n        {\n          value: 1,\n          label: 'Every Day'\n        },\n        {\n          value: 2,\n          label: 'Mondays, Wednesdays, Fridays'\n        },\n        {\n          value: 3,\n          label: 'Mondays & Thursdays'\n        },\n        {\n          value: 7,\n          label: 'Once a week (Mondays)'\n        },\n        {\n          value: 0,\n          label: \"Don't send newsletter\"\n        }\n      ]\n    },\n    label: 'Newsletter Frequency (requires restart)'\n  }\n}\naddToSettingsSchema.push(newsletterFrequency);\n\n// create new \"campaign\" lens for all posts from the past X days that haven't been scheduled yet\nviewParameters.campaign = function (terms) {\n  return {\n    find: {\n      scheduledAt: {$exists: false},\n      postedAt: {\n        $gte: terms.after \n      }\n    }, \n    options: {sort: {sticky: -1, score: -1}}\n  };\n}\n\nheroModules.push({\n  template: 'newsletterBanner'\n});","defaultFrequency = 7;\ndefaultPosts = 5;\n\ngetCampaignPosts = function (postsCount) {\n\n  var newsletterFrequency = getSetting('newsletterFrequency', defaultFrequency);\n\n  // look for last scheduled campaign in the database\n  var lastCampaign = SyncedCron._collection.findOne({name: 'Schedule newsletter'}, {sort: {finishedAt: -1}, limit: 1});\n  \n  // if there is a last campaign use its date, else default to posts from the last 7 days\n  var lastWeek = moment().subtract('days', 7).toDate();\n  var after = (typeof lastCampaign != 'undefined') ? lastCampaign.finishedAt : lastWeek\n\n  var params = getParameters({\n    view: 'campaign',\n    limit: postsCount,\n    after: after\n  });\n  return Posts.find(params.find, params.options).fetch();\n}\n\nbuildCampaign = function (postsArray) {\n  var postsHTML = '', subject = '';\n\n  // 1. Iterate through posts and pass each of them through a handlebars template\n  postsArray.forEach(function (post, index) {\n    if(index > 0)\n      subject += ', ';\n\n    subject += post.title;\n\n    var postUser = Meteor.users.findOne(post.userId);\n\n    // the naked post object as stored in the database is missing a few properties, so let's add them\n    var properties = _.extend(post, {\n      authorName: getAuthorName(post),\n      postLink: getPostLink(post),\n      profileUrl: getProfileUrl(postUser),\n      postPageLink: getPostPageUrl(post),\n      date: moment(post.postedAt).format(\"MMMM D YYYY\")\n    });\n\n    if (post.body)\n      properties.body = marked(trimWords(post.body, 20)).replace('<p>', '').replace('</p>', ''); // remove p tags\n    \n    if(post.url)\n      properties.domain = getDomain(post.url)\n\n    postsHTML += Handlebars.templates[getTemplate('emailPostItem')](properties);\n  });\n\n  // 2. Wrap posts HTML in digest template\n  var digestHTML = Handlebars.templates[getTemplate('emailDigest')]({\n    siteName: getSetting('title'),\n    date: moment().format(\"dddd, MMMM Do YYYY\"),\n    content: postsHTML\n  });\n\n  // 3. wrap digest HTML in email wrapper tempalte\n  var emailHTML = buildEmailTemplate(digestHTML);\n\n  return {\n    postIds: _.pluck(postsArray, '_id'),\n    subject: trimWords(subject, 15),\n    html: emailHTML\n  }\n}\n\nscheduleNextCampaign = function () {\n  var posts = getCampaignPosts(getSetting('postsPerNewsletter', defaultPosts));\n  if(!!posts.length){\n    return scheduleCampaign(buildCampaign(posts))\n  }else{\n    var result = 'No posts to schedule todayâ€¦';\n    console.log(result)\n    return result\n  }\n}\n\nMeteor.methods({\n  testCampaign: function () {\n    scheduleNextCampaign();\n  }\n});","later = Npm.require('later');\n\ndefaultFrequency = 7; // once a week\n\ngetSchedule = function (parser) {\n  var frequency = getSetting('newsletterFrequency', defaultFrequency);\n  switch (frequency) {\n    case 1: // every day\n    // sched = {schedules: [{dw: [1,2,3,4,5,6,0]}]};\n    return parser.recur().on(1,2,3,4,5,6,0).dayOfWeek();\n\n    case 2: // Mondays, Wednesdays, Fridays\n    // sched = {schedules: [{dw: [2,4,6]}]};\n    return parser.recur().on(2,4,6).dayOfWeek();\n\n    case 3: // Mondays, Thursdays\n    // sched = {schedules: [{dw: [2,5]}]};\n    return parser.recur().on(2,5).dayOfWeek();\n\n    case 7: // Once a week (Mondays)\n    // sched = {schedules: [{dw: [2]}]};\n    return parser.recur().on(2).dayOfWeek();\n\n    default: // Don't send\n    return null;\n  }  \n}\n\ngetNextCampaignSchedule = function () {\n  // var s;\n  var s = SyncedCron._entries[0].schedule(later.parse)\n  // SyncedCron._entries.forEach(function(entry) {\n  //   s = entry.schedule(later.parse);\n\n  // });\n  return later.schedule(s).next(1)\n}\n\nSyncedCron.add({\n  name: 'Schedule newsletter',\n  schedule: function(parser) {\n    // parser is a later.parse object\n    // var sched;\n    return getSchedule(parser)\n    \n  }, \n  job: function() {\n    scheduleNextCampaign();\n  }\n});\n\nMeteor.startup(function() {\n  if(getSetting('newsletterFrequency', defaultFrequency) != 0) {\n    SyncedCron.start();\n  };\n});","scheduleCampaign = function (campaign) {\n  MailChimpOptions.apiKey = getSetting('mailChimpAPIKey');\n  MailChimpOptions.listId = getSetting('mailChimpListId');\n\n  var htmlToText = Meteor.require('html-to-text');\n  var text = htmlToText.fromString(campaign.html, {\n      wordwrap: 130\n  });\n  var defaultEmail = getSetting('defaultEmail');\n  var result= '';\n\n  if(!!MailChimpOptions.apiKey && !!MailChimpOptions.listId){\n\n    console.log( 'Creating campaignâ€¦');\n\n    try {\n        var api = new MailChimp();\n    } catch ( error ) {\n        console.log( error.message );\n    }\n\n    api.call( 'campaigns', 'create', {\n      type: 'regular',\n      options: {\n        list_id: MailChimpOptions.listId,\n        subject: campaign.subject,\n        from_email: getSetting('defaultEmail'),\n        from_name: getSetting('title')+ ' Top Posts',\n      },\n      content: {\n        html: campaign.html,\n        text: text\n      }\n    }, Meteor.bindEnvironment(function ( error, result ) {\n      if ( error ) {\n        console.log( error.message );\n        result = error.message;\n      } else {\n        console.log( 'Campaign created');\n        // console.log( JSON.stringify( result ) );\n\n        var cid = result.id;\n        var archive_url = result.archive_url;\n        var scheduledTime = moment().zone(0).add('hours', 1).format(\"YYYY-MM-DD HH:mm:ss\");\n\n        api.call('campaigns', 'schedule', {\n          cid: cid,\n          schedule_time: scheduledTime\n        }, Meteor.bindEnvironment(function ( error, result) {\n          if (error) {\n            console.log( error.message );\n            result = error.message;\n          }else{\n            console.log('Campaign scheduled for '+scheduledTime);\n            console.log(campaign.subject)\n            // console.log( JSON.stringify( result ) );\n\n            // mark posts as sent\n            Posts.update({_id: {$in: campaign.postIds}}, {$set: {scheduledAt: new Date()}}, {multi: true})\n\n            // send confirmation email\n            var confirmationHtml = Handlebars.templates[getTemplate('emailDigestConfirmation')]({\n              time: scheduledTime,\n              newsletterLink: archive_url,\n              subject: campaign.subject\n            });\n            sendEmail(defaultEmail, 'Newsletter scheduled', buildEmailTemplate(confirmationHtml));\n            result = campaign.subject;\n          }\n        }));\n      }\n    }));\n  }\n  return result;\n}\n\naddToMailChimpList = function(userOrEmail, confirm, done){\n  var user, email;\n\n  if(typeof userOrEmail == \"string\"){\n    user = null;\n    email = userOrEmail;\n  }else if(typeof userOrEmail == \"object\"){\n    user = userOrEmail;\n    email = getEmail(user);\n    if (!email)\n      throw 'User must have an email address';\n  }\n\n  MailChimpOptions.apiKey = getSetting('mailChimpAPIKey');\n  MailChimpOptions.listId = getSetting('mailChimpListId');\n  // add a user to a MailChimp list.\n  // called when a new user is created, or when an existing user fills in their email\n  if(!!MailChimpOptions.apiKey && !!MailChimpOptions.listId){\n\n    console.log('adding \"'+email+'\" to MailChimp listâ€¦');\n\n    try {\n        var api = new MailChimp();\n    } catch ( error ) {\n        console.log( error.message );\n    }\n\n    api.call( 'lists', 'subscribe', {\n      id: MailChimpOptions.listId,\n      email: {\"email\": email},\n      double_optin: confirm\n    }, Meteor.bindEnvironment(function ( error, result ) {\n      if ( error ) {\n        console.log( error.message );\n        done(error, null);\n      } else {\n        console.log( JSON.stringify( result ) );\n        if(!!user)\n          setUserSetting('subscribedToNewsletter', true, user);\n        done(null, result);\n      }\n    }));\n  }\n\n};\n\nsyncAddToMailChimpList = Async.wrap(addToMailChimpList);\n\nMeteor.methods({\n  addCurrentUserToMailChimpList: function(){\n    var currentUser = Meteor.users.findOne(this.userId);\n    try {\n      return syncAddToMailChimpList(currentUser, false);\n    } catch (error) {\n      throw new Meteor.Error(500, error.message);\n    }\n  },\n  addEmailToMailChimpList: function (email) {\n    try {\n      return syncAddToMailChimpList(email, true);\n    } catch (error) {\n      throw new Meteor.Error(500, error.message);\n    }\n  }\n})","\nMeteor.startup(function () {\n\n  Router.map(function() {\n\n    this.route('campaign', {\n      where: 'server',\n      path: '/email/campaign',\n      action: function() {\n        var campaign = buildCampaign(getCampaignPosts(getSetting('postsPerNewsletter', 5)));\n        var campaignSubject = '<div class=\"campaign-subject\"><strong>Subject:</strong> '+campaign.subject+' (note: contents might change)</div>';\n        var campaignSchedule = '<div class=\"campaign-schedule\"><strong>Scheduled for:</strong> '+getNextCampaignSchedule()+'</div>';\n\n        this.response.write(campaignSubject+campaignSchedule+campaign.html);\n        this.response.end();\n      }\n    });\n\n    this.route('digestConfirmation', {\n      where: 'server',\n      path: '/email/digest-confirmation',\n      action: function() {\n        var confirmationHtml = Handlebars.templates[getTemplate('emailDigestConfirmation')]({\n          time: 'January 1st, 1901',\n          newsletterLink: 'http://example.com',\n          subject: 'Lorem ipsum dolor sit amet'\n        });\n        this.response.write(buildEmailTemplate(confirmationHtml));\n        this.response.end();\n      }\n    });\n\n  });\n\n});","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<style type=\\\"text/css\\\">\\n  .email-digest{\\n  }\\n  .digest-date{\\n    color: #999;\\n    font-weight: normal;\\n    font-size: 16px;\\n  }\\n  .post-item{\\n    border-top: 1px solid #ddd;\\n  }\\n  .post-date{\\n    font-size: 13px;\\n    color: #999;\\n  }\\n  .post-title{\\n    font-size: 18px;\\n    line-height: 1.6;\\n  }\\n  .post-thumbnail{\\n  }\\n  .post-meta{\\n    font-size: 13px;\\n    color: #999;\\n    margin: 5px 0;\\n  }\\n  .post-meta a{\\n    color: #333;\\n  }  \\n  .post-domain{\\n    font-weight: bold;\\n  }\\n  .post-body-excerpt{\\n    font-size: 14px;\\n  }\\n  .post-body-excerpt p{\\n    margin: 0;\\n  }\\n</style>\\n\\n<span class=\\\"heading\\\">Recently on {{siteName}}</span>\\n<span class=\\\"digest-date\\\">â€“ {{date}}</span>\\n<br><br>\\n\\n<div class=\\\"email-digest\\\">\\n  {{{content}}}\\n</div>\\n<br>\");Handlebars.templates[\"emailDigest\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailDigest\"});};","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<span class=\\\"heading\\\">Newsletter scheduled for {{time}}</span><br><br>\\n\\n<a href=\\\"{{newsletterLink}}\\\">{{subject}}</a><br><br>\");Handlebars.templates[\"emailDigestConfirmation\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailDigestConfirmation\"});};","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<div class=\\\"post-item\\\">\\n<br >\\n\\n<span class=\\\"post-title\\\">\\n  {{#if thumbnailUrl}}\\n    <img class=\\\"post-thumbnail\\\" src=\\\"{{thumbnailUrl}}\\\"/>&nbsp;\\n  {{/if}}\\n\\n  <a href=\\\"{{postLink}}\\\" target=\\\"_blank\\\">{{title}}</a>\\n</span>\\n\\n<div class=\\\"post-meta\\\">\\n  {{#if domain}}\\n    <a class=\\\"post-domain\\\" href=\\\"\\\">{{domain}}</a>\\n    | \\n  {{/if}}\\n  <span class=\\\"post-submitted\\\">Submitted by <a href=\\\"{{profileUrl}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{authorName}}</a></span>\\n  <span class=\\\"post-date\\\">on {{date}}</span>\\n  |\\n  <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{comments}} Comments</a>\\n</div>\\n\\n\\n{{#if body}}\\n  <div class=\\\"post-body-excerpt\\\">\\n    {{{body}}}\\n    <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">Read more</a>\\n  </div>\\n{{/if}}\\n\\n\\n<br>\\n</div>\\n\\n\");Handlebars.templates[\"emailPostItem\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailPostItem\"});};"]}