{"version":3,"file":"/packages/collection2.js","sources":["collection2/collection2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,oD;AACA,4B;AACA,8D;AACA,kC;AACA,sC;AACA,qC;AACA,G;;AAEA,8C;AACA,uB;AACA,sC;AACA,6D;AACA,4D;AACA,G;;AAEA,E;AACA,a;AACA,G;;AAEA,oC;AACA,qE;AACA,sB;AACA,0B;;AAEA,uB;AACA,wB;AACA,0B;AACA,G;;AAEA,8B;AACA,4F;AACA,G;;AAEA,gD;AACA,wC;;AAEA,kB;AACA,8B;AACA,E;;AAEA,qD;AACA,oD;;AAEA,+B;AACA,yC;AACA,gD;AACA,G;AACA,C;;AAEA,sB;AACA,qE;AACA,kE;AACA,gD;AACA,2B;AACA,8B;AACA,wB;AACA,K;AACA,C;;AAEA,G;AACA,2C;AACA,0I;AACA,sB;AACA,E;AACA,iF;AACA,+E;AACA,4E;AACA,2C;AACA,G;AACA,wE;AACA,kB;;AAEA,sC;AACA,8B;AACA,G;;AAEA,gB;AACA,8B;;AAEA,kF;AACA,uD;AACA,mF;AACA,M;AACA,6B;AACA,mC;AACA,qH;AACA,oC;AACA,2C;AACA,oC;AACA,2B;AACA,W;AACA,gB;AACA,yB;AACA,S;AACA,0C;AACA,gF;AACA,6D;AACA,yC;AACA,oF;AACA,qD;AACA,mC;AACA,gD;AACA,6B;AACA,4B;AACA,2B;AACA,0B;AACA,a;AACA,gB;AACA,e;AACA,mD;AACA,yB;AACA,2H;AACA,W;AACA,S;AACA,O;AACA,M;AACA,yB;AACA,qB;AACA,c;AACA,mC;AACA,O;;AAEA,K;AACA,K;;AAEA,6B;AACA,2B;AACA,4C;AACA,8B;AACA,yB;AACA,2B;AACA,uB;;AAEA,kD;AACA,gF;AACA,gC;AACA,K;;AAEA,+B;AACA,gF;AACA,+D;AACA,kC;AACA,O;AACA,K;;AAEA,gB;AACA,K;;AAEA,wE;AACA,4E;AACA,2D;AACA,a;AACA,mC;AACA,qE;AACA,8C;AACA,a;AACA,+D;AACA,qB;AACA,uB;AACA,O;;AAEA,2C;AACA,qB;AACA,0B;AACA,gF;AACA,sB;AACA,2B;AACA,kC;AACA,iC;AACA,yB;AACA,0B;AACA,0B;AACA,yB;AACA,kC;AACA,S;AACA,S;;AAEA,wB;AACA,e;AACA,qB;AACA,O;;AAEA,mB;AACA,M;AACA,qD;;AAEA,gD;AACA,0B;AACA,yB;AACA,gF;AACA,sB;AACA,2B;AACA,kC;AACA,iC;AACA,0B;AACA,yB;AACA,0B;AACA,yB;AACA,kC;AACA,S;AACA,S;;AAEA,mB;AACA,M;AACA,c;AACA,mB;AACA,K;;AAEA,iE;AACA,8D;AACA,kE;AACA,gE;AACA,8D;AACA,mE;AACA,a;AACA,mC;AACA,sF;AACA,6H;AACA,sB;AACA,uF;AACA,W;AACA,iC;;AAEA,mB;AACA,M;AACA,qD;AACA,uE;AACA,8D;AACA,sF;AACA,wI;AACA,sB;AACA,uF;AACA,W;AACA,iC;;AAEA,mB;AACA,M;AACA,a;AACA,K;;AAEA,0E;AACA,gE;AACA,oC;AACA,gB;AACA,0B;AACA,oB;AACA,Q;AACA,0B;AACA,oB;AACA,Q;AACA,2B;AACA,oB;AACA,Q;AACA,gB;AACA,qB;AACA,O;AACA,G;AACA,0E;AACA,sE;AACA,0E;AACA,2E;AACA,qD;AACA,E;;AAEA,4D;AACA,kB;AACA,kD;AACA,E;;AAEA,kC;AACA,6D;AACA,uD;AACA,yD;AACA,iD;AACA,mB;AACA,2D;AACA,wF;AACA,kB;AACA,oE;AACA,sC;AACA,qE;AACA,mC;AACA,gB;AACA,iB;AACA,S;AACA,O;AACA,K;AACA,oC;AACA,I;AACA,G;;AAEA,E;AACA,U;AACA,G;;AAEA,2E;AACA,mD;AACA,wD;;AAEA,qB;AACA,oD;AACA,G;;AAEA,4C;AACA,0B;AACA,kB;AACA,sB;AACA,uB;;AAEA,2C;AACA,wC;AACA,4B;AACA,gD;AACA,6B;AACA,Y;AACA,mB;AACA,K;;AAEA,sD;AACA,uB;AACA,kB;AACA,sB;AACA,uB;AACA,U;AACA,6C;AACA,G;;AAEA,gC;AACA,mD;AACA,uB;AACA,iB;AACA,G;AACA,0B;;AAEA,kF;AACA,mF;;AAEA,qF;AACA,qC;AACA,kE;AACA,iE;AACA,8D;AACA,mE;AACA,Y;AACA,8B;AACA,c;AACA,sE;AACA,M;AACA,G;;AAEA,kE;AACA,iE;AACA,qD;AACA,wB;AACA,+B;AACA,2C;AACA,4G;AACA,K;AACA,G;;AAEA,mC;AACA,gB;AACA,G;;AAEA,iE;AACA,0C;AACA,S;AACA,+D;AACA,iB;AACA,mB;AACA,G;;AAEA,wF;AACA,wE;AACA,kC;AACA,8B;AACA,qB;AACA,+B;AACA,mC;AACA,sC;AACA,6C;AACA,+B;AACA,sC;AACA,iE;AACA,2B;AACA,uB;AACA,4C;AACA,O;AACA,O;AACA,G;AACA,E;AACA,6E;AACA,2C;AACA,mJ;;AAEA,2E;AACA,wE;AACA,6C;AACA,yB;AACA,yB;AACA,+E;AACA,+D;AACA,mC;AACA,sC;AACA,K;AACA,G;;AAEA,6E;AACA,4E;AACA,2E;AACA,2E;AACA,6E;AACA,6C;AACA,4D;AACA,uC;AACA,2C;AACA,sC;AACA,G;;AAEA,uD;AACA,+E;AACA,oE;AACA,uE;AACA,wB;AACA,sD;AACA,G;;AAEA,iB;AACA,2D;AACA,6C;AACA,uD;AACA,qB;AACA,4B;AACA,oC;AACA,+D;AACA,yB;AACA,qB;AACA,0C;AACA,K;AACA,K;;AAEA,gB;AACA,sB;AACA,a;AACA,mB;AACA,K;AACA,iD;AACA,4B;AACA,oB;AACA,Y;AACA,oB;AACA,K;;AAEA,mE;AACA,0B;AACA,iC;AACA,6C;AACA,mH;AACA,O;AACA,K;AACA,gB;AACA,U;AACA,gC;AACA,mB;AACA,+E;AACA,6B;AACA,Y;AACA,kB;AACA,K;AACA,G;AACA,C;;AAEA,kC;AACA,mD;AACA,2B;AACA,2D;AACA,U;AACA,kC;AACA,G;AACA,iC;AACA,kC;AACA,mE;AACA,0B;AACA,wB;AACA,0D;AACA,G;AACA,e;AACA,C;;AAEA,gD;AACA,wD;AACA,4D;AACA,2B;AACA,e;AACA,sB;AACA,c;AACA,M;AACA,C;;AAEA,0E;AACA,yE;AACA,wK;AACA,0D;AACA,6C;AACA,6C;AACA,K;AACA,qC;AACA,I;AACA,C;;AAEA,4D;AACA,gE;AACA,uC;AACA,wD;AACA,kI;AACA,6D;AACA,oD;AACA,6C;AACA,K;AACA,wF;AACA,mK;AACA,4C;AACA,6C;AACA,K;AACA,qC;AACA,I;AACA,C;;AAEA,mC;AACA,kC;AACA,kI;AACA,E","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  denyInsert: Match.Optional(Boolean),\n  denyUpdate: Match.Optional(Boolean)\n});\n\n// Define some extra validation error messages\nSimpleSchema.messages({\n  notUnique: \"[label] must be unique\",\n  insertNotAllowed: \"[label] cannot be set during an insert\",\n  updateNotAllowed: \"[label] cannot be set during an update\"\n});\n\n/*\n * Public API\n */\n\nvar constructor = Meteor.Collection;\nMeteor.Collection = function c2CollectionConstructor(name, options) {\n  var self = this, ss;\n  options = options || {};\n\n  if (options.schema) {\n    ss = options.schema;\n    delete options.schema;\n  }\n\n  if (options.virtualFields) {\n    throw new Error('Collection2: Sorry, the virtualFields option is no longer supported.');\n  }\n\n  // Call original Meteor.Collection constructor\n  constructor.call(self, name, options);\n\n  // Attach schema\n  ss && self.attachSchema(ss);\n};\n\n// Make sure prototype and normal properties are kept\nMeteor.Collection.prototype = constructor.prototype;\n\nfor (var prop in constructor) {\n  if (constructor.hasOwnProperty(prop)) {\n    Meteor.Collection[prop] = constructor[prop];\n  }\n}\n\nif (Meteor.isServer) {\n  // A function passed to Meteor.startup is only run on the server if\n  // the process has not yet started up. So we need a flag to tell\n  // us whether to wrap in Meteor.startup or not\n  var hasStartedUp = false;\n  Meteor.startup(function () {\n    hasStartedUp = true;\n  });\n}\n\n/**\n * Meteor.Collection.prototype.attachSchema\n * @param  {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object from which to create a new SimpleSchema instance\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMeteor.Collection.prototype.attachSchema = function c2AttachSchema(ss) {\n  var self = this;\n\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  self._c2 = {};\n  self._c2._simpleSchema = ss;\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  _.each(ss.schema(), function(definition, fieldName) {\n    if (Meteor.isServer && ('index' in definition || definition.unique === true)) {\n      \n      function setUpIndex() {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`, we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition['index'];\n          if (indexValue === true) {\n            indexValue = 1;\n          }\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = !!definition.optional && unique;\n        if (indexValue !== false) {\n          self._collection._ensureIndex(index, {\n            background: true,\n            name: indexName,\n            unique: unique,\n            sparse: sparse\n          });\n        } else {\n          try {\n            self._collection._dropIndex(indexName);\n          } catch (err) {\n            console.warn(\"Collection2: Tried to drop mongo index \" + indexName + \", but there is no index with that name\");\n          }\n        }\n      }\n      \n      if (hasStartedUp) {\n        setUpIndex();\n      } else {\n        Meteor.startup(setUpIndex);\n      }\n\n    }\n  });\n\n  // Set up additional checks\n  ss.validator(function() {\n    var test, totalUsing, totalWillUse, sel;\n    var def = this.definition;\n    var val = this.value;\n    var op = this.operator;\n    var key = this.key;\n\n    if (def.denyInsert && val !== void 0 && !op) {\n      // This is an insert of a defined value into a field where denyInsert=true\n      return \"insertNotAllowed\";\n    }\n\n    if (def.denyUpdate && op) {\n      // This is an insert of a defined value into a field where denyUpdate=true\n      if (op !== \"$set\" || (op === \"$set\" && val !== void 0)) {\n        return \"updateNotAllowed\";\n      }\n    }\n\n    return true;\n  });\n\n  // First define deny functions to extend doc with the results of clean\n  // and autovalues. This must be done with \"transform: null\" or we would be\n  // extending a clone of doc and therefore have no effect.\n  self.deny({\n    insert: function(userId, doc) {\n      // If _id has already been added, remove it temporarily if it's\n      // not explicitly defined in the schema.\n      var id;\n      if (Meteor.isServer && doc._id && !ss.allowsKey(\"_id\")) {\n        id = doc._id;\n        delete doc._id;\n      }\n\n      // Referenced doc is cleaned in place\n      ss.clean(doc, {\n        isModifier: false,\n        // We don't do these here because they are done on the client if desired\n        filter: false,\n        autoConvert: false,\n        removeEmptyStrings: false,\n        extendAutoValueContext: {\n          isInsert: true,\n          isUpdate: false,\n          isUpsert: false,\n          userId: userId,\n          isFromTrustedCode: false\n        }\n      });\n\n      // Add the ID back\n      if (id) {\n        doc._id = id;\n      }\n\n      return false;\n    },\n    update: function(userId, doc, fields, modifier) {\n\n      // Referenced modifier is cleaned in place\n      ss.clean(modifier, {\n        isModifier: true,\n        // We don't do these here because they are done on the client if desired\n        filter: false,\n        autoConvert: false,\n        removeEmptyStrings: false,\n        extendAutoValueContext: {\n          isInsert: false,\n          isUpdate: true,\n          isUpsert: false,\n          userId: userId,\n          isFromTrustedCode: false\n        }\n      });\n\n      return false;\n    },\n    fetch: [],\n    transform: null\n  });\n\n  // Second define deny functions to validate again on the server\n  // for client-initiated inserts and updates. These should be\n  // called after the clean/autovalue functions since we're adding\n  // them after. These must *not* have \"transform: null\" because\n  // we need to pass the doc through any transforms to be sure\n  // that custom types are properly recognized for type validation.\n  self.deny({\n    insert: function(userId, doc) {\n      // We pass the false options because we will have done them on client if desired\n      doValidate.call(self, \"insert\", [doc, {removeEmptyStrings: false, filter: false, autoConvert: false}, function(error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], true, userId, false);\n\n      return false;\n    },\n    update: function(userId, doc, fields, modifier) {\n      // NOTE: This will never be an upsert because client-side upserts\n      // are not allowed once you define allow/deny functions.\n      // We pass the false options because we will have done them on client if desired\n      doValidate.call(self, \"update\", [null, modifier, {removeEmptyStrings: false, filter: false, autoConvert: false}, function(error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], true, userId, false);\n\n      return false;\n    },\n    fetch: []\n  });\n\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure) {\n    self.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n};\n\nMeteor.Collection.prototype.simpleSchema = function c2SS() {\n  var self = this;\n  return self._c2 ? self._c2._simpleSchema : null;\n};\n\n// Wrap DB write operation methods\n_.each(['insert', 'update', 'upsert'], function(methodName) {\n  var _super = Meteor.Collection.prototype[methodName];\n  Meteor.Collection.prototype[methodName] = function () {\n    var self = this, args = _.toArray(arguments);\n    if (self._c2) {\n      args = doValidate.call(self, methodName, args, false,\n        (Meteor.isClient && Meteor.userId && Meteor.userId()) || null, Meteor.isServer);\n      if (!args) {\n        // doValidate already called the callback or threw the error\n        if (methodName === \"insert\") {\n          // insert should always return an ID to match core behavior\n          return self._makeNewID();\n        } else {\n          return;\n        }\n      }\n    }\n    return _super.apply(self, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(type, args, skipAutoValue, userId, isFromTrustedCode) {\n  var self = this, schema = self._c2._simpleSchema,\n      doc, callback, error, options, isUpsert, selector;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n\n  } else if (type === \"update\" || type === \"upsert\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  // If update was called with upsert:true or upsert was called, flag as an upsert\n  isUpsert = (type === \"upsert\" || (type === \"update\" && options.upsert === true));\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err)\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient) {\n    var last = args.length - 1;\n    if (typeof args[last] === 'function') {\n      callback = args[last] = wrapCallbackForParsingServerErrors(self, options.validationContext, callback);\n    }\n  }\n\n  if (options.validate === false) {\n    return args;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var id;\n  if (Meteor.isServer && doc._id && !schema.allowsKey(\"_id\")) {\n    id = doc._id;\n    delete doc._id;\n  }\n\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings) {\n    // Clean the doc/modifier in place (removes any virtual fields added\n    // by the deny transform, too)\n    schema.clean(docToClean, {\n      filter: filter,\n      autoConvert: autoConvert,\n      getAutoValues: getAutoValues,\n      isModifier: (type !== \"insert\"),\n      removeEmptyStrings: removeEmptyStrings,\n      extendAutoValueContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode\n      }\n    });\n  }\n  \n  // Preliminary cleaning on both client and server. On the server, automatic\n  // values will also be set at this point.\n  doClean(doc, (Meteor.isServer && !skipAutoValue), options.filter !== false, options.autoConvert !== false, options.removeEmptyStrings !== false);\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (doc.hasOwnProperty(prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {\n    var set = docToValidate.$set || {};\n    docToValidate.$set = _.clone(selector);\n    _.extend(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient) {\n    doClean(docToValidate, true, false, false, false);\n  }\n\n  // Validate doc\n  var ctx = schema.namedContext(options.validationContext);\n  var isValid = ctx.validate(docToValidate, {\n    modifier: (type === \"update\" || type === \"upsert\"),\n    upsert: isUpsert,\n    extendedCustomContext: {\n      isInsert: (type === \"insert\"),\n      isUpdate: (type === \"update\" && options.upsert !== true),\n      isUpsert: isUpsert,\n      userId: userId,\n      isFromTrustedCode: isFromTrustedCode\n    }\n  });\n\n  if (isValid) {\n    // Add the ID back\n    if (id) {\n      doc._id = id;\n    }\n    // Update the args to reflect the cleaned doc\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer) {\n      var last = args.length - 1;\n      if (typeof args[last] === 'function') {\n        args[last] = wrapCallbackForParsingMongoValidationErrors(self, doc, options.validationContext, args[last]);\n      }\n    }\n    return args;\n  } else {\n    error = getErrorObject(ctx);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var message, invalidKeys = context.invalidKeys();\n  if (invalidKeys.length) {\n    message = context.keyErrorMessage(invalidKeys[0].name);\n  } else {\n    message = \"Failed validation\";\n  }\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message);\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n  context.addInvalidKeys([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(col, doc, vCtx, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {\n    if (error && ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) && error.message.indexOf('c2_') !== -1) {\n      var context = col.simpleSchema().namedContext(vCtx);\n      addUniqueError(context, error.message);\n      arguments[0] = getErrorObject(context);\n    }\n    return cb.apply(this, arguments);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(col, vCtx, cb) {\n  return function wrappedCallbackForParsingServerErrors(error) {\n    // Handle our own validation errors\n    var context = col.simpleSchema().namedContext(vCtx);\n    if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      context.addInvalidKeys(invalidKeysFromServer);\n      arguments[0] = getErrorObject(context);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(context, error.reason);\n      arguments[0] = getErrorObject(context);\n    }\n    return cb.apply(this, arguments);\n  };\n}\n\n// Meteor.Collection2 is deprecated\nMeteor.Collection2 = function () {\n  throw new Error(\"Collection2: Doing `new Meteor.Collection2` no longer works. Just use a normal `new Meteor.Collection` call.\");\n};"]}